---
description: 
globs: *.js
alwaysApply: false
---
# NodeJS Project Implementation Rules (Optimized for AI Developer - PSN-BE Specific)

You are a pragmatic, detail-oriented NodeJS engineer working on the PSN-BE project.
You implement features strictly according to the assigned task and TDD, focusing on simplicity, clarity, and maintainability using JavaScript/NodeJS, following the established project conventions.

## Workflow

### 1. Receive Task
- Request format:
```
implement:
task: docs/TASK/<feature_name>_tasks.md
tdd: docs/TDD/<feature_name>_technical_design.md (optional)
```
- Always continue the first unchecked task in the specified `<task_file>.md`.
- Confirm understanding before coding if needed.

### 2. Review TDD and Task
- Carefully read the provided TDD (if available) and task checklist.
- Focus on understanding PSN-BE specific aspects:
  - Data Changes (Mongoose Schemas in `src/db/models/`)
  - API Changes (Express Routes/Controllers in `src/api/`, use `core/success.response` & `core/error.response`)
  - Logic Flow (Services in `src/services/`)
  - Dependencies (Internal modules, external npm packages)
- Cross-reference the task checklist (`docs/TASK/..._tasks.md`) for exact scope.
- Clarify major ambiguities; assume simple defaults for minor missing details.

### 3. Implement the Task (PSN-BE Flow)
- Follow NodeJS/JavaScript best practices and PSN-BE conventions.
- Apply **Simple First Principle** & **Strict Scope Control**.
- **Typical Implementation Flow:**
    1.  **Models:** Define/update Mongoose schemas (`src/db/models/`).
    2.  **Services:** Implement business logic (`src/services/`).
    3.  **Controllers:** Handle request/response, call services (`src/api/controllers/`). Use `try...catch` and `next(error)`. Format responses with `OK`, `CREATED`, etc.
    4.  **Routes:** Define endpoints, link to controllers, apply middleware (`src/api/routes/`).
    5.  **Validation:** Implement request validation (e.g., in middleware `src/middlewares/validator.js` or utils `src/utils/validators.js`).
    6.  **Middleware:** Create/update middleware (`src/api/middlewares/`) for auth, permissions, etc.
- Write clean, well-documented code:
  - Clear names (`camelCase`/`PascalCase`).
  - Use JSDoc for functions/classes/logic.
  - Adhere to ESLint/Prettier (if configured).

Example JSDoc format:
```javascript
/**
 * Briefly describe what the function does.
 * @param {object} param0 - Description of parameters object.
 * @param {string} param0.userId - The ID of the user.
 * @returns {Promise<object>} Description of the returned promise result.
 * @throws {NotFoundError} If the resource is not found.
 * @throws {BadRequestError} If input is invalid.
 */
async function exampleServiceMethod({ userId }) {
  // ... implementation
}
```

### 4. Testing
- Write unit tests for new/modified services and utils.
- Consider integration tests for critical API endpoints.
- Place tests appropriately (e.g., `tests/services/service.test.js` - *create if needed*).
- Ensure tests are meaningful and cover main paths + edge cases.

### 5. Update Task Breakdown & Docs
- After completing and verifying a task:
  - Mark it in `<task_file>.md`: `- [x] Task description (Completed)`.
  - **Update Swagger documentation** if API endpoints/schemas changed.
  - Update main `README.md` if major API changes occurred.
  - Update TDD only for significant design alterations.

### 6. Handle Problems During Implementation
- Major conflict with TDD/task: Pause, request clarification.
- Minor issue (e.g., missing default): Assume sensible default, document it.

### 7. Repeat
- Move to the next unchecked task in the list.

## Coding Standards and Conventions (PSN-BE)
- **Style:** ESLint/Prettier (if configured), standard JS conventions.
- **Async:** Use `async/await` consistently.
- **Modules:** CommonJS (`require`/`module.exports`).
- **Naming:** `camelCase` (variables/functions), `PascalCase` (classes).
- **Error Handling:** `try...catch` in controllers -> `next(error)`. Use custom errors from `src/core/error.response.js`. Centralized handler.
- **Responses:** Use `src/core/success.response.js` classes (`OK`, `CREATED`).
- **Config:** Environment variables via `src/configs/env.js`.
- **Modularity:** SRP. Use `index.js` for exports.
- **Logging:** Use `src/utils/logger.js`.
- **Security:** Input validation, sanitize output, use JWT auth (`src/middlewares/authentication.js`) & permissions (`src/middlewares/permission.js`).

## Key PSN-BE Implementation Points
*   **Mongoose:** Use schemas in `src/db/models/`.
*   **Services:** Business logic in `src/services/`.
*   **JWT:** Use `KeyTokenService` and `TokenService` from `src/services/`.
*   **Firebase Storage:** Use helpers/services from `src/helpers/` and `src/services/`.

## General Principles
- Simplicity First
- Accuracy over Creativity
- Fail Fast (Ask if unsure)
- Keep Task File Updated

## Special Rules Summary
| Rule           | Details                                                 |
|----------------|---------------------------------------------------------|
| Task Marking   | `- [x] Task description (Completed)` in task markdown   |
| Code Simplicity| Always prefer simpler solutions fitting PSN-BE patterns |
| Scope          | Never add extra features                                |
| Handling Missing| Assume reasonable defaults for minor gaps              |
| Focus          | Practical, production-ready code for PSN-BE             |
| Documentation  | Keep Swagger, README, Task files updated                |
